#include "config_manager.h"
#include <windows.h>
#include <fstream>
#include <sstream>
#include <algorithm>

ConfigManager::ConfigManager() : enableWorker(true), checkUpdates(true) {
    SetDefaults();
    configPath = GetExePath() + "\\config.ini";
}

ConfigManager::~ConfigManager() {
    Save();
}

void ConfigManager::SetDefaults() {
    cpuThreshold = 70;
    memoryThreshold = 70;
    autoStart = true;
    showWindow = true;
    updateInterval = 2;
    notificationEnabled = true;
    notificationCooldown = 60;
    checkUpdates = true;  // 默认开启
}

std::string ConfigManager::GetExePath() {
    char buffer[MAX_PATH];
    GetModuleFileNameA(NULL, buffer, MAX_PATH);
    std::string path(buffer);
    size_t pos = path.find_last_of("\\/");
    return path.substr(0, pos);
}

void ConfigManager::Load() {
    std::ifstream file(configPath);
    if (!file.is_open()) {
        Save();
        return;
    }
    
    std::string line;
    while (std::getline(file, line)) {
        ParseLine(line);
    }
    file.close();
}

void ConfigManager::Save() {
    std::ofstream file(configPath);
    if (!file.is_open()) return;
    
    file << "; MikaBooM Configuration File\n";
    file << "; Generated by MikaBooM C++ Edition\n\n";
    
    file << "[General]\n";
    file << "cpu_threshold=" << cpuThreshold << "\n";
    file << "memory_threshold=" << memoryThreshold << "\n";
    file << "auto_start=" << (autoStart ? "true" : "false") << "\n";
    file << "show_window=" << (showWindow ? "true" : "false") << "\n";
    file << "update_interval=" << updateInterval << "\n";
    file << "check_updates=" << (checkUpdates ? "true" : "false") << "\n\n";
    
    file << "[Notification]\n";
    file << "enabled=" << (notificationEnabled ? "true" : "false") << "\n";
    file << "cooldown=" << notificationCooldown << "\n";
    
    file.close();
}

void ConfigManager::ParseLine(const std::string& line) {
    if (line.empty() || line[0] == ';' || line[0] == '[') return;
    
    size_t pos = line.find('=');
    if (pos == std::string::npos) return;
    
    std::string key = Trim(line.substr(0, pos));
    std::string value = Trim(line.substr(pos + 1));
    
    if (key == "cpu_threshold") cpuThreshold = std::stoi(value);
    else if (key == "memory_threshold") memoryThreshold = std::stoi(value);
    else if (key == "auto_start") autoStart = (value == "true");
    else if (key == "show_window") showWindow = (value == "true");
    else if (key == "update_interval") updateInterval = std::stoi(value);
    else if (key == "enabled") notificationEnabled = (value == "true");
    else if (key == "cooldown") notificationCooldown = std::stoi(value);
    else if (key == "check_updates") checkUpdates = (value == "true");
}

std::string ConfigManager::Trim(const std::string& str) {
    size_t first = str.find_first_not_of(" \t\r\n");
    size_t last = str.find_last_not_of(" \t\r\n");
    if (first == std::string::npos) return "";
    return str.substr(first, (last - first + 1));
}

void ConfigManager::SetConfigPath(const std::string& path) {
    configPath = path;
    Load();
}